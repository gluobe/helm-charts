---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-docker.cnf
data:
  docker.cnf: |
    [mysql]

    [mysqld]
    skip-log-bin
    skip-host-cache
    skip-name-resolve
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-mysql
  labels:
    component: mysql
spec:
  replicas: {{ .Values.image.replicas }}
  selector:
    matchLabels:
      component: mysql
  template:
    metadata:
      labels:
        component: mysql
    spec:
{{ if .Values.provisioning.url }}
      initContainers:
      - name: provision-sql
        image: curlimages/curl
        workingDir: /tmp
        args:
        - "{{ .Values.provisioning.url }}"
        - "-odump.sql"
        volumeMounts:
        - name: sqldump
          mountPath: /tmp
{{ end }}
      containers:
      - name: mysql
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 3306
        args:
        - "--verbose"
        env:
        - name: MYSQL_RANDOM_ROOT_PASSWORD
          value: "yes"
        - name: MYSQL_DATABASE
          value: {{ .Values.image.config.database }}
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-user
              key: username
{{ if .Values.secretProvider }}
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-password
              key: password
{{ else }}
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-user
              key: password
{{ end }}
        volumeMounts:
        - name: database
          mountPath: /var/lib/mysql
        - name: config
          mountPath: /etc/mysql/conf.d
{{ if .Values.provisioning.url }}
        - name: sqldump
          mountPath: /docker-entrypoint-initdb.d
{{ end }}
{{ if .Values.secretProvider }}
        - name: akv
          mountPath: /mnt/secrets
{{ end }}
      volumes:
        - name: database
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-database
        - name: config
          configMap:
            name: {{ .Release.Name }}-docker.cnf
{{ if .Values.provisioning.url }}
        - name: sqldump
          emptyDir: {}
{{ end }}
{{ if .Values.secretProvider }}
        - name: akv
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ .Values.secretProvider }}
{{ end }}
